# This is a basic workflow to help you get started with Actions (Obtained from the Lecture5 folder of the class repository)

name: CI

# Controls when the workflow will run
on: [push, pull_request, workflow_dispatch]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    container: openjdk
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        working-directory: ./Projects/P3
        run: |
          javac -cp "tests/junit-4.10.jar:src/:tests/" src/*.java tests/*.java
  test_pacman_move:
    runs-on: ubuntu-latest
    container: openjdk
    steps:
      - uses: actions/checkout@v2
      - name: Run test
        working-directory: ./Projects/P3
        run: |
          javac -cp "tests/junit-4.10.jar:src/:tests/" src/*.java tests/TestPacManMove.java
          java -cp "tests/junit-4.10.jar:src/:tests/" org.junit.runner.JUnitCore -Djava.awt.headless=true tests/TestPacManMove
  test_ghost_in_range:
    runs-on: ubuntu-latest
    container: openjdk
    steps:
      - uses: actions/checkout@v2
      - name: Run test
        working-directory: ./Projects/P3
        run: |
          javac -cp "tests/junit-4.10.jar:src/:tests/" src/*.java tests/TestGhostInRange.java
          java -cp "tests/junit-4.10.jar:src/:tests/" org.junit.runner.JUnitCore -Djava.awt.headless=true tests/TestGhostInRange
  test_map_eatcookie:
    runs-on: ubuntu-latest
    container: openjdk
    steps:
      - uses: actions/checkout@v2
      - name: Run test
        working-directory: ./Projects/P3
        run: |
          javac -cp "tests/junit-4.10.jar:src/:tests/" src/*.java tests/TestMapEatCookie.java
          java -cp "tests/junit-4.10.jar:src/:tests/" org.junit.runner.JUnitCore -Djava.awt.headless=true tests/TestMapEatCookie
  pacmangetvalidmoves:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    container: openjdk
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        working-directory: ./Projects/P3
        run: |
          javac -cp "tests/junit-4.10.jar:src/:tests/" src/*.java tests/TestPacManValidMoves.java
          java -cp "tests/junit-4.10.jar:src/:tests/" -Djava.awt.headless=true org.junit.runner.JUnitCore TestPacManValidMoves

  ghostgetvalidmoves:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    container: openjdk
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        working-directory: ./Projects/P3
        run: |
          javac -cp "tests/junit-4.10.jar:src/:tests/" src/*.java tests/TestGhostValidMoves.java
          java -cp "tests/junit-4.10.jar:src/:tests/" -Djava.awt.headless=true org.junit.runner.JUnitCore TestGhostValidMoves

  mapgetloc:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    container: openjdk
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        working-directory: ./Projects/P3
        run: |
          javac -cp "tests/junit-4.10.jar:src/:tests/" src/*.java tests/TestMapGetLoc.java
          java -cp "tests/junit-4.10.jar:src/:tests/" -Djava.awt.headless=true org.junit.runner.JUnitCore TestMapGetLoc
test_attack:
  runs-on: ubuntu-latest
  container: openjdk
  steps:
    - uses: actions/checkout@v2
    - name: Run test
      working-directory: ./Projects/P3
      run: |
        javac -cp "tests/junit-4.10.jar:src/:tests/" src/*.java tests/TestAttack.java
        java -cp "tests/junit-4.10.jar:src/:tests/" org.junit.runner.JUnitCore -Djava.awt.headless=true tests/TestAttack
  test_consume:
    runs-on: ubuntu-latest
    container: openjdk
    steps:
      - uses: actions/checkout@v2
      - name: Run test
        working-directory: ./Projects/P3
        run: |
          javac -cp "tests/junit-4.10.jar:src/:tests/" src/*.java tests/TestConsume.java
          java -cp "tests/junit-4.10.jar:src/:tests/" org.junit.runner.JUnitCore -Djava.awt.headless=true tests/TestConsume
  test_map_attack:
    runs-on: ubuntu-latest
    container: openjdk
    steps:
      - uses: actions/checkout@v2
      - name: Run test
        working-directory: ./Projects/P3
        run: |
          javac -cp "tests/junit-4.10.jar:src/:tests/" src/*.java tests/TestMapAttack.java
          java -cp "tests/junit-4.10.jar:src/:tests/" org.junit.runner.JUnitCore -Djava.awt.headless=true tests/TestMapAttack